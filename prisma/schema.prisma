generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model GuildEvent {
    id       Int        @id @default(autoincrement()) @db.UnsignedInt
    name     String     @unique @db.VarChar(255)
    calendar Calendar[]

    @@map("guild_event")
}

model Calendar {
    id           Int        @id @default(autoincrement()) @db.UnsignedInt
    guildEventId Int        @map("guild_event_id") @db.UnsignedInt
    dayOfWeek    Int        @map("day_of_week") @db.TinyInt
    time         String     @db.Char(6)
    event        GuildEvent @relation(fields: [guildEventId], references: [id], onDelete: Cascade)

    @@unique([dayOfWeek, time])
    @@index([guildEventId], map: "calendar_guild_event_id_fkey")
    @@map("calendar")
}

model Config {
    key   String  @id @db.VarChar(255)
    value String? @db.LongText

    @@map("config")
}

model Event {
    id          Int         @id @default(autoincrement()) @db.UnsignedInt
    description String?     @db.VarChar(255)
    channelId   String      @db.VarChar(255)
    messageId   String?     @db.VarChar(255)
    supps       Int
    dds         Int
    free        Int
    name        String
    creatorId   String      @map("creator_id")
    isDone      Boolean     @default(false)
    isDeleted   Boolean     @default(false) @map("is_deleted")
    eventLogs   EventLog[]
    roles       EventRole[]
    partys      Party[]

    @@map("event")
}

model EventLog {
    id        String   @id @default(uuid()) @db.Char(36)
    message   String   @db.VarChar(255)
    createdAt DateTime @default(now()) @map("crated_at")
    eventId   Int      @map("event_id") @db.UnsignedInt
    event     Event    @relation(fields: [eventId], references: [id])

    @@index([createdAt])
    @@index([eventId], map: "EventLog_event_id_fkey")
}

model EventRole {
    uid     String @id @default(uuid()) @db.Char(36)
    name    String @db.VarChar(255)
    id      String @db.VarChar(255)
    eventId Int    @map("event_id") @db.UnsignedInt
    event   Event  @relation(fields: [eventId], references: [id])

    @@index([id, name])
    @@index([eventId], map: "event_role_event_id_fkey")
    @@map("event_role")
}

model Party {
    id           Int           @id @default(autoincrement()) @db.UnsignedInt
    description  String?       @db.VarChar(255)
    isDone       Boolean       @default(false)
    eventId      Int           @map("event_id") @db.UnsignedInt
    createdAt    DateTime      @default(now()) @map("crated_at")
    Event        Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
    partyMembers PartyMember[]

    @@index([eventId], map: "party_event_id_fkey")
    @@map("party")
}

model PartyMember {
    uid      String @id @default(uuid()) @db.Char(36)
    userId   String @map("user_id")
    charNo   Int    @map("char_no") @db.TinyInt
    memberNo Int    @map("member_no") @db.TinyInt
    classUid String @map("class_uid") @db.Char(36)
    partyId  Int    @map("party_id") @db.UnsignedInt
    class    Class  @relation(fields: [classUid], references: [uid])
    party    Party  @relation(fields: [partyId], references: [id], onDelete: Cascade)

    @@unique([memberNo, partyId])
    @@unique([userId, partyId])
    @@index([classUid], map: "party_member_class_uid_fkey")
    @@index([partyId], map: "party_member_party_id_fkey")
    @@map("party_member")
}

model Class {
    uid          String        @id @default(uuid()) @db.Char(36)
    name         String        @unique
    icon         String        @unique
    role         Role
    partyMembers PartyMember[]

    @@map("class")
}

enum Role {
    DD
    SUPP
}
